Requisitos software para laboratorio de pentesting:
	Virtual Box (www.virtualbox.org)
	Kali Linux (distribucion para realizar auditoría de seguridad) (https://www.kali.org/downloads/)
	Debian Linux (https://www.debian.org/distrib/index.es.html)
	Metasplotaible (distribucion con muchos fallos de seguridad, utilizada para recibir ataques) (https://sourceforge.net/projects/metasploitable/)
	Tiny Core (PC victima para simular a un usuario normal con navegación y demás) (http://tinycorelinux.net/downloads.html)		
	Windows for VirtualBox (https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/)

------------------

Etapas de Pentesting: 	
1 – Recopilación de información.
Antes que nada hay que recopilar información sobre el sistema que vamos a atacar, tenemos que conocerlo todo lo que podamos para realizar una auditoría completa, la información lo es todo y cuanta más tengamos más fácil se nos harán los pasos posteriores.
Algunas herramientas a destacar son:
Nmap (escaneo de puertos)
FOCA (análisis de metadatos)
PassiveRecon (para webs)

2 – Búsqueda de vulnerabilidades.
Una vez hemos recopilado suficiente información hay que buscar vulnerabilidades. Es un trabajo que es mejor hacer manualmente, buscando a partir de la información que hemos recopilado. Así bien, hay algunas herramientas que automatizan más el proceso:
Acunetix
Nessus

3 – Explotación de vulnerabilidades.
Una vez hemos detectado vulnerabilidades, mediante la explotación se “obtiene provecho” de ellas, accediendo al sistema u obteniendo provecho de él.
Tenemos un ejemplo de explotación de una vulnerabilidad en SQL Injection: ¿Qué es? – Saltar login. Ésta es una de las fases más complicadas, sobretodo si no se han realizado correctamente las dos fases anteriores.
Una herramienta a destacar es Metasploit

4 – Post-explotación.
Ésta fase no se da siempre, cómo indica su nombre es lo que se realiza después de la explotación y de haber obtenido acceso. Sería posible hacer una recogida de información a nivel interno para intentar ganar privilegios o realizar otras acciones.

5 – Elaboración de informes
En el caso de un test de penetración real se elaborarán informes que indiquen las vulnerabilidades que se han encontrado y cómo se han explotado.
Las auditorías que haré en éste blog serán sobre máquinas simuladas, por lo que no realizaremos nunca la quinta fase.

----------------------------------------------------

Instalar Kali Linux en VirtualBox:
	Crear nueva maquina virtual, nombre Kali Linux
	tipo: linux, version: debian 64 bit
	asignar 2 gb de ram
	asignar mas de 20 gb de disco duro
	Todo lo demas default
	Configuracion, almacenamiento, seleccionar nuestra iso Kali y que sea live cd
	Configuracion, sistema, procesador y activar PAE/NX (para distribuciones linux)
	Ejecutar el disco virtual e instalar todo por default: idioma español, pero teclado en ingles ya que amazon utiliza teclado en ingles
	Ya instalada quitar el iso de Kali
	
Instalar Debian Linux en VirtualBox:
	Crear nueva maquina virtual, nombre Debian Linux
	tipo: linux, version: debian 64 bit
	asignar 2 gb de ram
	asignar mas de 20 gb de disco duro
	Todo lo demas default
	Configuracion, almacenamiento, seleccionar nuestra iso Debian 
	Configuracion, sistema, procesador y activar PAE/NX (para distribuciones linux)
	Ejecutar el disco virtual e instalar todo por default: idioma español, pero teclado en ingles, y seleccionar un motor de escritorio
	Ya instalada quitar el iso de Debian	
	
Instalar Metasplotaible Linux en VirtualBox:	
	Crear nueva maquina virtual, nombre Metasplotaible
	tipo Linux, version  verificar la version de linux que se descargo, en mi caso 2x 32 bit
	asignar 1gb de ram, no tiene interfaz grafica
	Disco duro, seleccionar uno existente y seleccionar el archivo Metasplotaible.vmdk
	Configuracion, sistema, procesador y activar PAE/NX (para distribuciones linux)
	Al iniciar el usuario y contraseña es msfadmin
	
Instalar Tiny Linux en VirtualBox:
	Crear nueva maquina virtual, nombre Tiny Linux
	tipo: linux, version: linux 2.6 32 bit
	asignar 2 gb de ram
	asignar mas de 20 gb de disco duro
	Todo lo demas default
	Configuracion, almacenamiento, seleccionar nuestra iso Tiny
	Configuracion, sistema, procesador y activar PAE/NX (para distribuciones linux)
	Ejecutar la opcion flush, y cuando cargue el live cd, abajo hay una opcion para instalar
	Ya instalada quitar el iso de Tiny	
	

----------------------------------------------------

CONFIGURAR LA RED DEBIAN ROUTER 1:
	Configuracion, red, Adaptador 1: Red interna, internal-10
	Configuracion, red, Adaptador 2: Red interna, NAT (para internet)
	
	Entrar a debian como usuario root con su password correspondiente
	Revisar archivo de configuracion de interfaces:
		nano /etc/network/interfaces
		agregar linea para asignar ip estatica del router
			auto enp0s3
			#asignar ip estatica
			iface enp0s3 inet static
				address 192.168.10.254
				netmask 255.255.255.0
				
		agregar al final para asinar la red a internet:
			auto enp0s8
			iface enp0s8 inet dhcp
			
		grabar y sailr, reiniciar servicio de red:
			/etc/init.d/networking restart
			
		probar el acceso a internet:
			ping 8.8.8.8
				
		Instalar paquete para dhcp-server permite configurar un servidor dhcp:
			apt-get install isc-dhcp-server
		
		Configurar servidor dhcp:
			/etc/default/isc-dhcp-server
			modificar:
				INTERFACESv4="enp0s3"
		
		Configurar archivo de configuracion dhcp como router:
			nano /etc/dhcp/dhcpd.conf
			Al final del archivo:
			subnet 192.168.10.0 netmask 255.255.255.0 {
				range 192.168.10.100  192.168.10.199;
				option routers 192.168.10.254;
				option subnet-mask 255.255.255.0;
				option broadcast-address 192.168.10.255
			}
			
		Reiniciar servicio dhcp
			/etc/init.d/isc-dhcp-server restart
			
		Instalar Quagga, Zebra es el motor básico de Quagga (motor simulacion de enrutadores basado en so cisco):
			apt-get install quagga quagga-doc
			cp /usr/share/doc/quagga-core/examples/zebra.conf.sample /etc/quagga/zebra.conf
			cp /usr/share/doc/quagga-core/examples/ripd.conf.sample /etc/quagga/ripd.conf
			nano /etc/quagga/ripd.conf: enable password zebra
			
			touch /etc/quagga/daemons
			echo ‘zebra=yes’ >> /etc/quagga/daemons
			echo ‘ripd=yes’ >> /etc/quagga/daemons
			/etc/quagga/zebra.conf y /etc/quagga/ripd.conf 
			hostname Router1
			enable password zebra
			
			Se inicializan los servicios:
				/etc/init.d/zebra start
				/etc/init.d/ripd start
			
			Identificar que puerto se esta ejecutando con zebra (default 2602):
				less /etc/services | grep zebra
			
			Conectarse:
				telnet localhost 2602
				enable
				configure terminal
				router rip
				network 192.168.10.0/24
				network 192.168.120.0/24
				network enp0s3
				network enp0s8
			
			o mejor modificar el archivo /etc/init.d/ripd
			y agregar las lineas:
				router rip
				network 192.168.10.0/24
				network 192.168.120.0/24
				network enp0s3
				network enp0s8
			
			/etc/init.d/ripd restart
			
			Habilitar servidor como enrutador:
				echo “1” > /proc/sys/net/ipv4/ip_forward
				nano /etc/sysctl.conf
				net.ipv4.ip_forward
				net.ipv4.conf.default.forwarding=1		
			
			Modificar la configuracion de red del adaptador 2:
				red interna: internal-120
			

			Reconfigurar la segunda interface para conectar al segundo enrutador
			nano /etc/network/interfaces
			iface enp0s8 inet static
				address 192.168.120.1
				netmask 255.255.255.0
				gateway 192.168.120.2  #todo lo que no conozca la red la va a enviar por aqui
				
				
			/etc/init.d/networking restart
			
			Validar conexion con el otro router 2:
				ping 192.168.120.1
				ip route show
			
-------------------------------------------------
			
CONFIGURAR LA RED KALI:			
	Configuracion, red, Adaptador 1: Red interna, NAT (para internet)
	
	Instalar paquetes de red:
		sudo apt-get install net-tools
	
	Configuracion, red, Adaptador 1: Red interna, internal-10
	
	Abrir wireshark para monitorizar
	terminal: dhclient -r eth0
	dhclient eth0
	ifconfig -> 192.168.10.101
	
	validar: ip route sh
	
			
-------------------------------------------------


TRABAJAR CON EL ROUTER 2

	Clonar Debian Router 1, a nombre Debian Router 2
	Modificar la red 1 por internal-120
	Red 2 que sea NAT
	
	La iniciamos el router 2 y configuramos:
	nano /etc/network/interfaces
		auto enp0s3
		iface enp0s3 inet static
			address 192.168.120.2
			netmask 255.255.255.0
			
		auto enp0s8
		iface enp0s8 inet dhcp
		
	/etc/init.d/networking restart
	
	instalamos quagga:
		apt install quagga quagga-doc
	
	cp /usr/share/doc/quagga-core/examples/zebra.conf.sample /etc/quagga/zebra.conf
	cp /usr/share/doc/quagga-core/examples/ripd.conf.sample /etc/quagga/ripd.conf
	nano /et
	hostname Router2
	enable password zebra
	
	Configuramos los demonios de zebra y ripd
		touch /etc/quagga/daemons
		echo ‘zebra=yes’ >> /etc/quagga/daemons
		echo ‘ripd=yes’ >> /etc/quagga/daemons
		enable password zebra
	
	Se inicializan los servicios:
		/etc/init.d/zebra start
		/etc/init.d/ripd start
		
	Conectarse:
		telnet localhost 2602
		enable
		configure terminal
		router rip
		network 10.0.3.0/24
		network 192.168.120.0/24
		network enp0s8
		network enp0s3
		
		o mejor modificar el archivo /etc/init.d/ripd
		y agregar las lineas:
			router rip
			network 10.0.3.0/24
			network 192.168.120.0/24
			network enp0s8
			network enp0s3
		
		/etc/init.d/ripd restart
		
		Habilitar servidor como enrutador:
			echo “1” > /proc/sys/net/ipv4/ip_forward
			nano /etc/sysctl.conf
			net.ipv4.ip_forward = 1
			net.ipv4.conf.default.forwarding=1

		nano /etc/network/interfaces
			iface enp0s8 inet static
			address 192.168.120.1
			netmask 255.255.255.0
		
		

---------------------------------


VALIDAR QUE SE HAYA CONFIGURADO CORRECTAMENTE ENTRE LOS ROUTERS

		Validar: 
			ip route sh

		Deberá quedar asi desde el router 1:
			default via 192.168.120.2 dev enp0s8 onlink     #la salida default que se agrego al agregar el gateway
			10.0.3.0/24 via 192.168.120.2 dev enp0s8 proto zebra metric 20    #router 2 esta compartiendo NAT a router 1
			192.168.10.0/24 dev enp0s3 proto kernel scope link src 192.168.10.254   #la ip estatica 1
			192.168.120.0/24 dev enp0s3 proto kernel scope link src 192.168.120.1   #la ip estatica que esta en la red con router 2
			
		Deberá quedar asi desde el router 2:
			default via 10.0.3.0 dev enp0s8      #la salida default que se agrego al agregar el gateway
			10.0.3.0/24 dev enp0s8 proto kernel scope link src 10.0.3.15   #red NAT para acceso a internet
			10.168.10.0/24 via 192.168.120.1 dev enp0s3 proto zebra metric 20    #red hacia router 1 gracias a zebra
			192.168.120.0/24 dev enp0s3 proto kernel scope link src 192.168.120.2   #red original del router
			

------------------------------------------


CONFIGURACION NAT Y REDIRECCIONAMIENTO (MODELO DE TRADUCCION DE DIRECCIONES)
ASIGNAR INTERNET DESDE EL ROUTER A CADA MAQUINA LOCAL.
SE ASGINA UN PUERTO EN EL ROUTER PARA CADA MAQUINA LOCAL Y ASI PUEDA COMPARTIR EL INTERNET EL ROUTER


	Iniciar maquinas kali linux y los 2 routers debian.
	Verificar comunicacion de kali al router
		ping 192.168.120.2
		ping 10.0.3.15
		ping 8.8.8.8 #aun no hay salida a internet
	

	Configurar listas para la traduccion de ip en router 2 es la que tiene internet
	MASQUERADE hace para cualquier ip y no tener que definir una por una
		iptables -t nat -A POSTROUTING -o enp0s8 -j MASQUERADE
		
	Ahora si, en kali probar la conexion a internet
		ping 8.8.8.8
		
	Si no hay ping por una pagina con dns por ejemplo www.google.com
		nano /etc/resolv.conf
		nameserver 1.1.1.1
		nameserver 8.8.8.8
			
---------------------------------

ATAQUES A PROTOCOLOS DE RED

	Pc Kali - validar ips de una pagina con DNS
		host wwww.platzi.com
		host unal.edu.co

	Recopila direcciones de subdominios, o ips que estan asociados
		dnsenum unal.edu.co
		
	Ver diccionario de contraseñas kali linux
		cp /usr/share/wordlists/dnsmap.txt /root/dnsmap.txt
		less /root/dnsmap.txt
		
	Utilizar el diccionario sobre una url
		dnsmap unal.edu.co -w dnsmap.txt
		
	DNS Poising. Protocolo ARP convierte una direccion ip a su direccion MAC
		Permite monitorizar una red
			Instalar sudo apt install wireshark y ejecutarlo
		
		Envia direcciones ARP con informacion falsa, y se analizan desde wireshark
			Instalar sudo apt install ettercap y ejecutarlo
				scan hosts
			en la lista se selecciona el host 1 como la victima
			y en host 2 la ip del gateway
			ejecutar arp posing
			iniciar wireshark
			
	DNS Spoofing: Permite redirigir un DNS a otra ip falsa para suplantar
		nano /etc/ettercap.dns
			facebook.com A 192.168.10.103
			*.facebook.com  A 192.168.10.103
			www.facebook.com  A 192.168.10.103
		
		nano /etc/etter.cap
			ec_uid=0
			
		start sniffing en ettercap
		filtrar "dns" en wireshark
		
	DHCP Spoofing: Reaccionar a una solicitud DHCP Discovery para suplantar la respuesta
			
		Plugin: DHCP Spoofing de Ettercap
			IP POOL: 192.168.10.30-40
			NETMASK: 255.255.255.0
			DNS Server IP: 8.8.8.8
			
		tiny linux: dhclient -r enp0s3
					dhclient -v enp0s3
	
		
	Encapsulado de paquetes con Scapy: Permite constuir paquetes a bajo nivel, encapsulando 
	y editando los encabezados.
	
	
	
		
	
		